substitutions:
  devicename: smart-switch1
  friendname: smart-switch1
  location: master
  board: esp32-c3-devkitm-1
  repin: GPIO1
  dcpin: GPIO2
  bkpin: GPIO3
  clpin: GPIO6
  mopin: GPIO7
  cspin: GPIO10

  # GPIO pins for the touch screen
  sdapin: GPIO4
  sclpin: GPIO5
  intpin: GPIO0

  # runTime: 15s      # How long to run without any input before going into deep.

esphome:
  name: $devicename
  friendly_name: $friendname
  on_boot:
    then:
      - globals.set:
          id: runtime_global
          value: '1000'
      - output.turn_off: gpio_3_backlight_pwm
      - script.execute: deepsleep_script


esp32:
  board: $board
  framework:
    type: arduino

# Enable logging
# Change to avoid "Components should block for at most 20-30ms" warning messages in the log - an issue since 2023.7.0
# Not really a breaking change - it's an issue I suspect due to the device being slow and this error previously
# simply not being reported
logger:
  baud_rate: 0      # Disable uart as it can cause current draw while deepsleeping
  level: DEBUG
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Round-Touchscreen"
    password: ""

captive_portal:

time:
  - platform: homeassistant
    timezone: "America/Denver"
    id: esptime

deep_sleep:
  wakeup_pin: 0
  wakeup_pin_mode: INVERT_WAKEUP
  sleep_duration: 30s

script:
  - id: deepsleep_script
    mode: restart
    then:
      - delay: !lambda "return id(runtime_global);"             # Resets the runTime timer, if the timer is not reset then the following lines will run.
      # - delay: $runTime
      - output.turn_off: gpio_3_backlight_pwm
      - lambda: |-
          id(smart_switch_display).sleep();    // Put the display to sleep
      - deep_sleep.enter

sensor:
  - platform: uptime
    name: "$devicename Uptime"
  - platform: wifi_signal
    name: "$devicename WiFi Signal"
    update_interval: 60s    

external_components:
  - source: github://GadgetFactory-Jeannie/esphome-components@main
    components: [gc9a01, CST816S_touchscreen]

i2c:
  scl: 5
  sda: 4

spi:
  mosi_pin: $mopin
  clk_pin: $clpin

# Need to turn on backlight as by default is not on
output:
  - platform: gpio
    pin: $repin
    id: display_reset
  - platform: ledc
    pin: $bkpin
    id: gpio_3_backlight_pwm
  - platform: template
    id: red_output
    type: float
    write_action:
      - lambda: return;
  - platform: template
    id: green_output
    type: float
    write_action:
      - lambda: return;
  - platform: template
    id: blue_output
    type: float
    write_action:
      - lambda: return;
light:
  - platform: monochromatic
    output: gpio_3_backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON
  - platform: rgb
    name: "Smart Switch"
    id: smart_switch
    red: red_output
    green: green_output
    blue: blue_output

font:
  - file: "gfonts://Roboto"
    id: font_16
    size: 16
  - file: "gfonts://Roboto"
    id: font_32
    size: 32

color:
  - id: my_red
    red: 100%
    green: 3%
    blue: 5%
  - id: my_green
    red: 3%
    green: 100%
    blue: 5%
  - id: my_blue
    red: 3%
    green: 5%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

image:
  - file: "mdi:lightbulb-off"
    id: light_off
    resize: 100x100
  - file: "mdi:lightbulb-on"
    id: light_on
    resize: 100x100
  - file: "mdi:lightbulb-outline"
    id: light_outline
    resize: 100x100
  - file: "images/color_wheel.jpg"
    id: color_wheel
    resize: 240x240
    type: RGBA
    
globals:
  - id: dimmer
    type: int
    restore_value: yes
    initial_value: '0'
  - id: red_global
    type: int
    restore_value: yes
  - id: green_global
    type: int
    restore_value: yes
  - id: blue_global
    type: int
    restore_value: yes
  - id: runtime_global
    type: int
    initial_value: '15000'

display:
  - platform: gc9a01
    id: smart_switch_display
    reset_pin: $repin
    cs_pin: $cspin
    dc_pin: $dcpin


    rotation: 90  # Rotate the screen so usb socket is pointing down
    # rotation: 270  # Rotate the screen so usb socket is pointing up

    pages:
      - id: main_page
        lambda: |-
          it.filled_circle(120, 120, 115, Color(id(red_global), id(green_global), id(blue_global)));
          if(id(smart_switch).current_values.is_on()){              // TODO: With the rgb light this takes a while to update correctly. When previously using a switch it was quick.
            it.image(it.get_width()/2, it.get_width()/2, id(light_on), ImageAlign::CENTER);
          } else {
            it.image(it.get_width()/2, it.get_width()/2, id(light_off), ImageAlign::CENTER);
          }
      - id: color_page
        lambda: |-
          it.image(it.get_width()/2, it.get_width()/2, id(color_wheel), ImageAlign::CENTER);
          it.filled_circle(120, 120, 40, Color(id(red_global), id(green_global), id(blue_global)));
      - id: dimmer_page
        lambda: |-
          it.filled_rectangle(0, id(dimmer), 240, 240-id(dimmer));
          it.circle(120, 120, 115, Color(id(red_global), id(green_global), id(blue_global)));
          it.printf(120, 170, id(font_32), id(my_black), TextAlign::CENTER, "Dimmer");

text_sensor:
  - platform: CST816S_touchscreen
    id: smart_switch_touch
    on_value:
      then:
        - if:
            condition:
              and:
                - display.is_displaying_page: main_page
                - text_sensor.state:
                    id: smart_switch_touch
                    state: 'SWIPE DOWN'
            then:
              - light.turn_on:
                  id: smart_switch
              - display.page.show: main_page
              - component.update: smart_switch_display
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - script.execute: deepsleep_script
              - output.set_level:
                  id: gpio_3_backlight_pwm
                  level: 100%
        - if:
            condition:
              and:
                - display.is_displaying_page: main_page
                - text_sensor.state:
                    id: smart_switch_touch
                    state: 'SWIPE UP'
            then:
              - light.turn_off:
                  id: smart_switch
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - display.page.show: main_page
              - component.update: smart_switch_display
              - script.execute: deepsleep_script
              - output.set_level:
                  id: gpio_3_backlight_pwm
                  level: 30%
        - if:
            condition:
              text_sensor.state:
                id: smart_switch_touch
                state: 'SWIPE LEFT'
            then:
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - display.page.show_previous: smart_switch_display
              - component.update: smart_switch_display
              - script.execute: deepsleep_script
              - output.set_level:
                  id: gpio_3_backlight_pwm
                  level: 100%
        - if:
            condition:
              and:
              - display.is_displaying_page: dimmer_page
              - or:
                  - text_sensor.state:
                      id: smart_switch_touch
                      state: 'SWIPE UP'
                  - text_sensor.state:
                      id: smart_switch_touch
                      state: 'SWIPE DOWN'
                  - text_sensor.state:
                      id: smart_switch_touch
                      state: 'SINGLE CLICK'
            then:
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - script.execute: deepsleep_script
              - lambda: |-
                  id(dimmer) = id(smart_switch_touch).getY();
                  float normalized = ((float)id(smart_switch_touch).getY()-1.0)/(240.0-1.0);     // Between 0 and 1 (y - min)/(max-min)
                  id(gpio_3_backlight_pwm).set_level(1-normalized);
                  auto call = id(smart_switch).make_call();
                  call.set_brightness(1-normalized);
                  call.perform();
              - component.update: smart_switch_display
        - if:
            condition:
              text_sensor.state:
                id: smart_switch_touch
                state: 'SWIPE RIGHT'
            then:
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - display.page.show_next: smart_switch_display
              - component.update: smart_switch_display
              - script.execute: deepsleep_script
              - output.set_level:
                  id: gpio_3_backlight_pwm
                  level: 100%
        - if:
            condition:
              and:
                - display.is_displaying_page: color_page
                - or:
                    - text_sensor.state:
                        id: smart_switch_touch
                        state: 'SINGLE CLICK'
                    - text_sensor.state:
                        id: smart_switch_touch
                        state: 'NONE'
            then:
              - globals.set:
                  id: runtime_global
                  value: '15000'
              - script.execute: deepsleep_script
              - lambda: |-
                  if(id(smart_switch_touch).getEvent() == 1)   //Finger release event
                    id(smart_switch_touch).updateColorWheelValues(id(smart_switch_touch).getX(), id(smart_switch_touch).getY());
                    id(red_global) = id(smart_switch_touch).rgbColorWheelValues[0];
                    id(green_global) = id(smart_switch_touch).rgbColorWheelValues[1];
                    id(blue_global) = id(smart_switch_touch).rgbColorWheelValues[2];
                    float normalized_red = ((float)id(red_global)-0.0)/(255.0-0.0);     // Between 0 and 1 (y - min)/(max-min)
                    float normalized_green = ((float)id(green_global)-0.0)/(255.0-0.0);     // Between 0 and 1 (y - min)/(max-min)
                    float normalized_blue = ((float)id(blue_global)-0.0)/(255.0-0.0);     // Between 0 and 1 (y - min)/(max-min)
                    auto call = id(smart_switch).make_call();
                    call.set_rgb(normalized_red, normalized_green, normalized_blue);
                    call.perform();
              - component.update: smart_switch_display
